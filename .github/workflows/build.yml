name: Build

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: ${{matrix.os}}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [arm64, x86_64]

        include:
          - os: ubuntu-latest
            platform: Linux

          - os: macos-latest
            platform: Darwin

          - os: windows-latest
            platform: Windows

          - arch: arm64
            apt-arch: arm64
            zip-arch: ARM64

          - arch: x86_64
            apt-arch: amd64
            zip-arch: AMD64

    steps:
      - name: Set up environment for Linux.
        if: matrix.os == 'ubuntu-latest'
        run: |
          if [ "${{matrix.arch}}" == "arm64" ]; then
            sudo dpkg --add-architecture arm64
            sudo add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble main restricted universe multiverse"
            sudo add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-updates main restricted universe multiverse"
            sudo add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-security main restricted universe multiverse"
            sudo add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-backports main restricted universe multiverse"
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          fi

          cat /etc/apt/sources.list.d/ubuntu.sources

          sudo apt-get update
          sudo apt-get install build-essential git make \
            pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev \
            libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev libfreetype6-dev:${{matrix.apt-arch}} \
            libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev linux-libc-dev:${{matrix.apt-arch}} \
            libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
            libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev \
            libpipewire-0.3-dev libwayland-dev libdecor-0-dev liburing-dev

      - name: Set up environment for Darwin.
        if: matrix.os == 'macos-latest'
        run: |
          if [ "${{matrix.arch}}" == "arm64" ]; then
            BREW="/opt/homebrew/bin/brew"
          else
            arch -${{matrix.arch}} /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            BREW="/usr/local/bin/brew"
          fi
          
          arch -${{matrix.arch}} $BREW install cmake pkg-config ninja libsndfile libx11 libxext \
            portaudio libxrandr libxi libxkbcommon mesa freetype libxcb

      - name: Set up environment for Windows.
        if: matrix.os == 'windows-latest' && matrix.arch == 'x86_64'
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          install: base-devel mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-freetype
          update: true

      - name: Checkout SDL.
        uses: actions/checkout@v4
        with:
          repository: libsdl-org/SDL

      - name: Build SDL for Linux or Darwin.
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" && "${{matrix.arch}}" == "arm64" ]; then
            FLAGS="-DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc"
          elif [ "$RUNNER_OS" == "Darwin" ]; then
            FLAGS="-DCMAKE_OSX_ARCHITECTURES=${{matrix.arch}}"
          else
            FLAGS=""
          fi

          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release $FLAGS
          cmake --build build --config Release
          sudo cmake --install build

      - name: Build SDL for Windows.
        if: matrix.os == 'windows-latest' && matrix.arch == 'x86_64'
        shell: msys2 {0}
        run: |
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          cmake --install build

      - name: Upload SDL build artifacts.
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.zip-arch}}-${{matrix.platform}}-SDL
          path: |
            build
        continue-on-error: true

      - name: Checkout SDL_image.
        uses: actions/checkout@v4
        with:
          repository: libsdl-org/SDL_image

      - name: Build SDL_image for Linux or Darwin.
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" && "${{matrix.arch}}" == "arm64" ]; then
            FLAGS="-DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc"
          elif [ "$RUNNER_OS" == "Darwin" ]; then
            FLAGS="-DCMAKE_OSX_ARCHITECTURES=${{matrix.arch}}"
          else
            FLAGS=""
          fi

          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release $FLAGS
          cmake --build build --config Release
          sudo cmake --install build

      - name: Build SDL_image for Windows.
        if: matrix.os == 'windows-latest' && matrix.arch == 'x86_64'
        shell: msys2 {0}
        run: |
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          cmake --install build

      - name: Upload SDL_image build artifacts.
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.zip-arch}}-${{matrix.platform}}-SDL_image
          path: |
            build
        continue-on-error: true

      - name: Checkout SDL_mixer.
        uses: actions/checkout@v4
        with:
          repository: libsdl-org/SDL_mixer

      - name: Build SDL_mixer for Linux or Darwin.
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" && "${{matrix.arch}}" == "arm64" ]; then
            FLAGS="-DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc"
          elif [ "$RUNNER_OS" == "Darwin" ]; then
            FLAGS="-DCMAKE_OSX_ARCHITECTURES=${{matrix.arch}}"
          else
            FLAGS=""
          fi

          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release $FLAGS
          cmake --build build --config Release
          sudo cmake --install build

      - name: Build SDL_mixer for Windows.
        if: matrix.os == 'windows-latest' && matrix.arch == 'x86_64'
        shell: msys2 {0}
        run: |
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          cmake --install build

      - name: Upload SDL_mixer build artifacts.
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.zip-arch}}-${{matrix.platform}}-SDL_mixer
          path: |
            build
        continue-on-error: true

      - name: Checkout SDL_ttf.
        uses: actions/checkout@v4
        with:
          repository: libsdl-org/SDL_ttf

      - name: Build SDL_ttf for Linux or Darwin.
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" && "${{matrix.arch}}" == "arm64" ]; then
            FLAGS="-DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc"
          elif [ "$RUNNER_OS" == "Darwin" ]; then
            FLAGS="-DCMAKE_OSX_ARCHITECTURES=${{matrix.arch}}"
          else
            FLAGS=""
          fi

          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release $FLAGS
          cmake --build build --config Release
          sudo cmake --install build

      - name: Build SDL_ttf for Windows.
        if: matrix.os == 'windows-latest' && matrix.arch == 'x86_64'
        shell: msys2 {0}
        run: |
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          cmake --install build

      - name: Upload SDL_ttf build artifacts.
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.zip-arch}}-${{matrix.platform}}-SDL_ttf
          path: |
            build
        continue-on-error: true
      
      - name: Checkout SDL_rtf.
        uses: actions/checkout@v4
        with:
          repository: libsdl-org/SDL_rtf

      - name: Build SDL_rtf for Linux or Darwin.
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" && "${{matrix.arch}}" == "arm64" ]; then
            FLAGS="-DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc"
          elif [ "$RUNNER_OS" == "Darwin" ]; then
            FLAGS="-DCMAKE_OSX_ARCHITECTURES=${{matrix.arch}}"
          else
            FLAGS=""
          fi

          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release $FLAGS
          cmake --build build --config Release
          sudo cmake --install build

      - name: Build SDL_rtf for Windows.
        if: matrix.os == 'windows-latest' && matrix.arch == 'x86_64'
        shell: msys2 {0}
        run: |
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          cmake --install build

      - name: Upload SDL_rtf build artifacts.
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.zip-arch}}-${{matrix.platform}}-SDL_rtf
          path: |
            build
        continue-on-error: true

      - name: Checkout SDL_net.
        uses: actions/checkout@v4
        with:
          repository: libsdl-org/SDL_net

      - name: Build SDL_net for Linux or Darwin.
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" && "${{matrix.arch}}" == "arm64" ]; then
            FLAGS="-DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc"
          elif [ "$RUNNER_OS" == "Darwin" ]; then
            FLAGS="-DCMAKE_OSX_ARCHITECTURES=${{matrix.arch}}"
          else
            FLAGS=""
          fi

          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release $FLAGS
          cmake --build build --config Release
          sudo cmake --install build

      - name: Build SDL_net for Windows.
        if: matrix.os == 'windows-latest' && matrix.arch == 'x86_64'
        shell: msys2 {0}
        run: |
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          cmake --install build

      - name: Upload SDL_net build artifacts.
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.zip-arch}}-${{matrix.platform}}-SDL_net
          path: |
            build
        continue-on-error: true