name: Build

on: [workflow_dispatch]

jobs:
  build:
    runs-on: ${{matrix.os}}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [arm64, x86_64]

        include:
          - os: ubuntu-latest
            platform: Linux

          - os: macos-latest
            platform: Darwin

          - os: windows-latest
            platform: Windows

          - arch: arm64
            apt-arch: arm64
            out-arch: ARM64

          - arch: x86_64
            apt-arch: amd64
            out-arch: AMD64

    steps:
      - name: Set up environment for Linux.
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          echo "SUDO=sudo" >> $GITHUB_ENV
          echo "GENERATOR=Unix Makefiles" >> $GITHUB_ENV

          if [ "${{matrix.arch}}" == "arm64" ]; then
            echo "FLAGS=-DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            sudo echo "http://archive.ubuntu.com/ubuntu/" | sudo tee /etc/apt/apt-mirrors.txt
            sudo echo "http://ports.ubuntu.com/ubuntu-ports/" | sudo tee -a /etc/apt/apt-mirrors.txt
            sudo dpkg --add-architecture arm64
            echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ noble main restricted universe multiverse" | sudo tee /etc/apt/sources.list
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
            echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ noble-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
            echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ noble-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          else
            echo "FLAGS=" >> $GITHUB_ENV
          fi

          sudo apt-get update
          sudo apt-get install build-essential pkg-config cmake gnome-desktop-testing libasound2-dev libpulse-dev \
            libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev libfreetype6-dev:${{matrix.apt-arch}} \
            libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libfreetype6:${{matrix.apt-arch}} \
            libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev linux-libc-dev:${{matrix.apt-arch}} \
            libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev \
            libpipewire-0.3-dev libwayland-dev libdecor-0-dev liburing-dev

      - name: Set up environment for Darwin.
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          echo "SUDO=sudo" >> $GITHUB_ENV
          echo "FLAGS=-DCMAKE_OSX_ARCHITECTURES=${{matrix.arch}}" >> $GITHUB_ENV
          echo "GENERATOR=Unix Makefiles" >> $GITHUB_ENV

          if [ "${{matrix.arch}}" == "arm64" ]; then
            BREW=/opt/homebrew/bin/brew
          else
            arch -${{matrix.arch}} /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            BREW=/usr/local/bin/brew
          fi

          arch -${{matrix.arch}} $BREW install libsndfile portaudio libxrandr libxi libxkbcommon mesa

      - name: Set up environment for Windows.
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          echo "SUDO=" >> $GITHUB_ENV
          echo "GENERATOR=Visual Studio 17 2022" >> $GITHUB_ENV

          if [ "${{matrix.arch}}" == "arm64" ]; then
            echo "FLAGS=-A ARM64 -DSDLIMAGE_VENDORED=OFF -DSDLMIXER_VENDORED=OFF -DSDLTTF_VENDORED=OFF" >> $GITHUB_ENV
          else
            echo "C:\msys64\mingw64\bin" >> $GITHUB_PATH
            echo "FLAGS=-A x64 -DSDLIMAGE_VENDORED=OFF -DSDLMIXER_VENDORED=OFF -DSDLTTF_VENDORED=OFF" >> $GITHUB_ENV
          fi

      - name: Checkout SDL.
        uses: actions/checkout@v4
        with:
          repository: libsdl-org/SDL

      - name: Build SDL.
        shell: bash
        run: |
          cmake -G "$GENERATOR" -S . -B build -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=${{matrix.platform}} -DCMAKE_SYSTEM_PROCESSOR=${{matrix.arch}} $FLAGS
          cmake --build build --config Release
          $SUDO cmake --install build

      - name: Upload SDL build artifacts.
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.out-arch}}-${{matrix.platform}}-SDL
          path: |
            build
        continue-on-error: true

      - name: Checkout SDL_image.
        uses: actions/checkout@v4
        with:
          repository: libsdl-org/SDL_image

      - name: Build SDL_image.
        shell: bash
        run: |
          cmake -G "$GENERATOR" -S . -B build -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=${{matrix.platform}} -DCMAKE_SYSTEM_PROCESSOR=${{matrix.arch}} $FLAGS
          cmake --build build --config Release
          $SUDO cmake --install build

      - name: Upload SDL_image build artifacts.
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.out-arch}}-${{matrix.platform}}-SDL_image
          path: |
            build
        continue-on-error: true

      - name: Checkout SDL_mixer.
        uses: actions/checkout@v4
        with:
          repository: libsdl-org/SDL_mixer

      - name: Build SDL_mixer.
        shell: bash
        run: |
          cmake -G "$GENERATOR" -S . -B build -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=${{matrix.platform}} -DCMAKE_SYSTEM_PROCESSOR=${{matrix.arch}} $FLAGS
          cmake --build build --config Release
          $SUDO cmake --install build

      - name: Upload SDL_mixer build artifacts.
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.out-arch}}-${{matrix.platform}}-SDL_mixer
          path: |
            build
        continue-on-error: true

      - name: Checkout SDL_ttf.
        uses: actions/checkout@v4
        with:
          repository: libsdl-org/SDL_ttf

      - name: Build SDL_ttf.
        shell: bash
        run: |
          cmake -G "$GENERATOR" -S . -B build -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=${{matrix.platform}} -DCMAKE_SYSTEM_PROCESSOR=${{matrix.arch}} $FLAGS
          cmake --build build --config Release
          $SUDO cmake --install build

      - name: Upload SDL_ttf build artifacts.
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.out-arch}}-${{matrix.platform}}-SDL_ttf
          path: |
            build
        continue-on-error: true
      
      - name: Checkout SDL_rtf.
        uses: actions/checkout@v4
        with:
          repository: libsdl-org/SDL_rtf

      - name: Build SDL_rtf.
        shell: bash
        run: |
          cmake -G "$GENERATOR" -S . -B build -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=${{matrix.platform}} -DCMAKE_SYSTEM_PROCESSOR=${{matrix.arch}} $FLAGS
          cmake --build build --config Release
          $SUDO cmake --install build

      - name: Upload SDL_rtf build artifacts.
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.out-arch}}-${{matrix.platform}}-SDL_rtf
          path: |
            build
        continue-on-error: true

      - name: Checkout SDL_net.
        uses: actions/checkout@v4
        with:
          repository: libsdl-org/SDL_net

      - name: Build SDL_net.
        shell: bash
        run: |
          cmake -G "$GENERATOR" -S . -B build -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=${{matrix.platform}} -DCMAKE_SYSTEM_PROCESSOR=${{matrix.arch}} $FLAGS
          cmake --build build --config Release
          $SUDO cmake --install build

      - name: Upload SDL_net build artifacts.
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.out-arch}}-${{matrix.platform}}-SDL_net
          path: |
            build
        continue-on-error: true